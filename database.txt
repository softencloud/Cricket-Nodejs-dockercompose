
Docker-Compose Project-NodeJS
-----------------------------------
=> App ---> FE, BE, DB
=> Cricket App ---> NodeJS, npm, html, MySQL

1. Launch instance (Amazon Linux) with the below user data to install Docker
#! /bin/bash
sudo -i
yum install docker -y
systemctl start docker

2. Connect to the Instance

3. Install Docker Compose
Download Docker Compose
=> sudo curl -L "https://github.com/docker/compose/releases/download/v2.10.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

Check the File. It should indicate that it's a binary file.
=> file /usr/local/bin/docker-compose

ls /usr/local/bin/
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

Give the permissions to execute the docker compose
sudo chmod +x /usr/local/bin/docker-compose

To check docker-compose version
docker-compose version

4. Create a directory
$ cricket-app

5. Go inside the directory

6. Create the below files;
Dockerfile,  app.js,  docker-compose.yml,  package.json, and create a directory called 'public'

6.3.  the docker-compose.yml file;


6.4. the package.json file;


6.5. Inside the 'public' directory; create 'index.html' file. 
          

7. Run the docker-containers using docker-compose
$ docker-compose up --build -d

Open Port no. 3000 to access the application. 
<Public IP of VM>:3000/
You will be able to see the application

Note: Dont insert any data through the application page, because we have created the tables in the database

8. Connect to MySQL
$ docker exec -it <db-container_name> mysql -u root -p

9. Enter Your Password
When prompted, enter the password you set in your docker-compose.yml 

10. Select the Database
Once youâ€™re in the MySQL shell, you need to select the database you want to use. Run below commands:

SHOW DATABASES;
USE cricket_db;
SHOW TABLES;

11. Create the Table
Now you can create the cricketers table by executing:
$ CREATE TABLE cricketers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    country VARCHAR(255) NOT NULL
);

(If any error shows like 'table already exists' ignore the error)

12. Verify the Table Creation
$ SHOW TABLES;
(Make sure the cricketers table exists in the cricket_db database.)

13. After successfully creating the table, you can exit the MySQL shell by typing:
EXIT

14. Insert the data in the application page in browser

15. To check the submitted data in your MySQL database, follow these steps:
15.1. Access the MySQL Container
$ docker exec -it <db-container_name> mysql -u root -p

15.2. Log In to MySQL
When prompted, enter your MySQL root password, which is Kastro

15.3. Select the Database
$ USE cricket_db;

15.4. Query the Data
Now, you can query the cricketers table to see the submitted data:
$ SELECT * FROM cricketers;

15.5. Review the Results
This will display all the records in the cricketers table, allowing you to verify the submitted data.

15.6. Exit MySQL
After you finish checking the data, you can exit the MySQL prompt by typing:
$ EXIT

To see the docker-compose logs; 
$ docker-compose logs db



